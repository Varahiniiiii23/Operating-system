[8:39 AM, 5/23/2023] ...vαrѕhíní...: #include <stdio.h> 
 #include <stdlib.h> 
 #define MAX 1000 
 int main() { 
     int n = 5;  
     int tracks[] = {55, 58, 60, 70, 18};  
     int start = 50;  
     int head = start;  
     int visited[MAX] = {0};  
     int total_head_movement = 0; 
     int max_track = tracks[0]; 
     int min_track = tracks[0]; 
     for (int i = 1; i < n; i++) { 
         if (tracks[i] > max_track) { 
             max_track = tracks[i]; 
         } 
         if (tracks[i] < min_track) { 
             min_track = tracks[i]; 
         } 
     } 
     int next_track = start; 
     while (next_track <= max_track) { 
         if (visited[next_track] == 0) { 
             total_head_movement += abs(head - next_track); 
             head = next_track; 
             visited[head] = 1; 
         } 
         next_track++; 
     } 
     next_track = max_track; 
     while (next_track >= min_track) { 
         if (visited[next_track] == 0) { 
             total_head_movement += abs(head - next_track); 
             head = next_track; 
             visited[head] = 1; 
         } 
         next_track--; 
     } 
     printf("Track Positions: "); 
     for (int i = 0; i < n; i++) { 
         printf("%d ", tracks[i]); 
     } 
     printf("\nStarting Track: %d\n", start); 
     printf("Sequence of Tracks Visited: %d ", start); 
     for (int i = start + 1; i <= max_track; i++) { 
         if (visited[i] == 1) { 
             printf("%d ", i); 
         } 
     } 
     for (int i = max_track; i >= min_track; i--) { 
         if (visited[i] == 1) { 
             printf("%d ", i); 
         } 
     } 
     printf("\nTotal Head Movement: %d\n", total_head_movement); 
     printf("Average Head Movement: %f\n", (float)total_head_movement / n); 
 }
[8:46 AM, 5/23/2023] ...vαrѕhíní...: #include<stdio.h> 
 #include<stdlib.h> 
 void round_robin(int bt[], int n, int quantum) { 
  int wt[n], tat[n], total_wt = 0, total_tat = 0, time = 0, remaining_bt[n]; 
  for(int i = 0; i < n; i++) 
  remaining_bt[i] = bt[i]; 
  while(1) { 
  int done = 1; 
  for(int i = 0; i < n; i++) { 
  if(remaining_bt[i] > 0) { 
  done = 0; 
  if(remaining_bt[i] > quantum) { 
  time += quantum; 
  remaining_bt[i] -= quantum; 
  } 
  else {time += remaining_bt[i]; 
  wt[i] = time - bt[i]; 
  remaining_bt[i] = 0; 
  } 
  } 
  } 
  if(done == 1) 
  break; 
  } 
  for(int i = 0; i < n; i++) { 
  tat[i] = bt[i] + wt[i]; 
  total_wt += wt[i]; 
  total_tat += tat[i]; 
  } 
  printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time"); 
  for(int i = 0; i < n; i++) { 
  printf("\nP%d\t\t%d\t\t%d\t\t%d", i+1, bt[i], wt[i], tat[i]); 
  } 
  float avg_wt = (float) total_wt / n; 
  float avg_tat = (float) total_tat / n; 
  printf("\n\nAverage Waiting Time: %f", avg_wt); 
  printf("\nAverage Turnaround Time: %f\n", avg_tat); 
 } 
 int main() { 
  int n = 3, quantum = 4; 
  int bt[] = {24, 3, 3}; 
  round_robin(bt, n, quantum); 
 }
